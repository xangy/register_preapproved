<?php
/**
 * @file
 * The register_preapproved module file, which produces the primary functionality.
 */

use Drupal\Core\Database\Query\Condition;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormState;
use Drupal\Core\Url;
use Drupal\user\UserInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * @todo Correct way of translating Config Entity
 *   https://www.drupal.org/docs/8/multilingual/translating-configuration
 *   Avoid calling unnecessary t function for config translations.
 */

/**
 * Implements hook_help().
 */
function register_preapproved_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'register_preapproved.list_form':
      $output  = '<p>' . t('Email addresses and domain patterns for users who are pre-approved to access the web site after registering (subject to the <a href=":public">Registration and Cancellation</a> settings). Note: deleting patterns from this list does not affect the account status for users already registered.', [':public' => Url::fromRoute('entity.user.admin_form')->toString()]) . '</p>';
      $output .= '<p>' . t('The count column indicates the number (as per the register pre-approved <a href=":settings">Settings</a> page) of registered users associated with each pattern. Full email addresses containing another domain pattern are not included in the corresponding domain pattern count.', [':settings' => Url::fromRoute('register_preapproved.settings')->toString()]) . '</p>';
      return $output;

    case 'register_preapproved.add_form':
      return '<p>' . t('Enter one or more email addresses or domain patterns and select the custom roles (as per the register pre-approved <a href=":settings">Settings</a> page) for users who are pre-approved to access the web site after registering (subject to the <a href=":public">Registration and Cancellation</a> settings).', [':settings' => Url::fromRoute('register_preapproved.settings')->toString(), ':public' => Url::fromRoute('entity.user.admin_form')->toString()]) . '</p>';

    case 'register_preapproved.settings':
      $output  = '<p>' . t('Pattern counts appearing on the list page can include or exclude pre-existing account email addresses that pre-date when each pattern was added.') . '</p>';
      $output .= '<p>' . t('Define a custom welcome message shown to pre-approved users after registration is complete.') . '</p>';
      $output .= '<p>' . t('Select the default custom roles available for selection when adding email addresses and domain patterns. If you do not see any custom roles, you can define some on the <a href=":link">Roles</a> page.', [':link' => Url::fromRoute('register_preapproved.roles')->toString()]) . '</p>';
      return $output;

    case 'register_preapproved.edit':
      return '<p>' . t('To change the email address or domain for this pattern, you must delete it and create a new entry.') . '</p>';
  }
}


/**
 * Implements hook_ENTITY_TYPE_presave().
 */
// @todo Implement hook_ENTITY_TYPE_presave() instead.
function register_preapproved_user_presave(UserInterface $account) {
  if ($account->isNew()) {
    // See if the user's email is on the pre-approved list.
    $or = new Condition('OR');
    $or->condition('mail', $account->getEmail())
       ->condition('mail', strstr($account->getEmail(), '@'));
    $pattern = \Drupal::database()->select('register_preapproved', 'rp')
      ->fields('rp')
      ->condition($or)
      ->execute()
      ->fetchAssoc();

    // Email address or domain is pre-approved.
    if (!empty($pattern)) {
      $register_preapproved_roles = array_keys(unserialize($pattern['roles']));

      // Add any applicable roles to the user account.
      if (count($register_preapproved_roles)) {
        // Retrieve user roles excluding anonymous.
        $user_roles = user_role_names(TRUE);

        // Apply pre-approved role selections.
        foreach ($register_preapproved_roles as $rid) {
          // Make sure pre-approved role exists.
          if (isset($user_roles[$rid])) {
            // @todo Probably use ContentEntityBase::set for updating entity field values.
            $edit['roles'][$rid] = $user_roles[$rid];
          }
        }
      }

      // Approve the user.
      $edit['status'] = TRUE;

      // Display pre-approved confirmation message to user after registration.
      $message = \Drupal::config('register_preapproved.settings')->get('register_preapproved_message');
      // @todo Site name should be coming from \Drupal::config('system.site')->get('name');
      Drupal::messenger()->addStatus(t($message, ['%site_name' => 'Drupal']));
    }
  }
}

/**
 * Copy of valid_email_address(), but without user name.
 * Validate everything after and including the @ symbol.
 * Exp. @domain.com
 *
 * @param $mail
 *   Email address to validate.
 *
 * @return boolean
 */
function valid_domain($mail) {
  $domain = '(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.?)+';
  $ipv4 = '[0-9]{1,3}(\.[0-9]{1,3}){3}';
  $ipv6 = '[0-9a-fA-F]{1,4}(\:[0-9a-fA-F]{1,4}){7}';

  return preg_match("/^@($domain|(\[($ipv4|$ipv6)\]))$/", $mail);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function register_preapproved_form_user_register_form_alter(array &$form, FormState &$form_state) {
  // Consider using _register_preapproved_validate_register_form for non-hooks and
  $form['#validate'][] = '_register_preapproved_validate_register_form';
}

/**
 * Custom validate function for user registration form.
 */
function _register_preapproved_validate_register_form(array &$form, FormState $form_state) {
  $config = \Drupal::config('register_preapproved.settings');
  if ($config->get('register_preapproved_restrict')) {
    $or = new Condition('OR');
    $or->condition('mail', $form_state->getValue('mail'))
      ->condition('mail', strstr($form_state->getValue('mail')), '@');
    $query = \Drupal::database()->select('register_preapproved', 'rp')
      ->fields('rp')
      ->condition($or);
    $pattern = $query->execute()->fetchAssoc();

    if (empty($pattern)) {
      $message = $config->get('register_preapproved_message');
      // @todo USe FormState::setError instead and system.site.name for Site name.
      $site_name = \Drupal::config('system.site')->get('name');
//      form_set_error('mail', t($message, ['%site_name' => $site_name]));
      $form_state->setError($form['mail'], t($message, ['%site_name' => $site_name]));
    }
  }
}
